int n, m, sa[N];
string a, b;
ll dp[N], prf[N], hashA[N], hashB[N], p[N];
ll getA(int i, int j){
    return (hashA[j] - hashA[i - 1] * p[j - i + 1] + Mod * Mod) % Mod;
}
ll getB(int i, int j){
    return (hashB[j] - hashB[i - 1] * p[j - i + 1] + Mod * Mod) % Mod;
}
bool sufCmp(int i, int j){
    int l = 0, r = min(m - i, m - j), pos = 0;
    while(l <= r){
        int mid = (l + r) >> 1;
        if(getB(i, i + mid) == getB(j, j + mid)) l = ++mid;
        else r = (pos = mid) - 1;
    }
    return b[i + pos] < b[j + pos] || (b[i + pos] == b[j + pos] && i > j);
}
void buildSA(){
    n = sz(a), m = sz(b);
    a = " " + a, b = " " + b;
    p[0] = 1;
    fu(i, 1, m){
        hashB[i] = (hashB[i - 1] * Base + b[i] - 'A' + 1) % Mod;
        sa[i] = i;
    }
    fu(i, 1, n) hashA[i] = (hashA[i - 1] * Base + a[i] - 'A' + 1) % Mod;
    fu(i, 1, max(n, m)) p[i] = p[i - 1] * Base % Mod;
    sort(sa + 1, sa + m + 1, sufCmp);
}
int get(int i, int j, int idx){
    int l = 0, r = min(m - sa[idx], j - i), pos = 0;
    while(l <= r){
        int mid = (l + r) >> 1;
        if(getB(sa[idx], sa[idx] + mid) == getA(i, i + mid)) l = ++mid;
        else r = (pos = mid) - 1;
    }
    if(b[sa[idx] + pos] < a[i + pos]) return -1;
    if(b[sa[idx] + pos] > a[i + pos]) return 1;
    if(b[sa[idx] + pos] == a[i + pos] && m - sa[idx] < j - i) return -1;
    return 0;
}
bool query(int i, int j){
    int l = 1, r = m;
    while(l <= r){
        int mid = (l + r) >> 1, c = get(i, j, mid);
        if(c == -1) l = ++mid;
        else if(c == 1) r = --mid;
        else return true;
    }
    return false;
}
